import asyncio
import socket
import struct
from asyncio.trsock import TransportSocket

queries = [b"\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x60\x36\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x20\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x86\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x86\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00",
b"\x00\x84\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00",
b"\x01\x2a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x21\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x20\x2a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x20\x2a\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00",
b"\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x20\xc2\x00\x00\x00\x24\x02\x20\x00\x12\x35\x48", #b"datetime",
b"\x00\x14\x00\x00\xf0\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x14\x00\x00\xf0\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x14\x00\x00\xf1\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x14\x00\x00\xf0\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x14\x00\x00\xf2\x00\x00\x00\x00\x00\x00\x00",
b"\x01\x21\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x85\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x85\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00",
b"\x01\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x01\x2b\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00",
b"\x00\x97\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x50\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x2a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x01\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x84\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x8e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x8f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x90\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x91\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x92\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x93\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x94\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x87\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x88\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x89\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x8a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x8c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x8d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x01\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x95\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x98\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\xb0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\xe8\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x01\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x01\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x40\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00",
b"\x00\x40\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01",
b"\x00\x40\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02",
b"\x00\x40\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00",
b"\x00\x40\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01",
b"\x00\x40\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02",
b"\x00\x40\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00",
b"\x00\x40\x00\x00\x00\x00\x00\x03\x00\x00\x00\x01",
b"\x00\x40\x00\x00\x00\x00\x00\x03\x00\x00\x00\x02",
b"\x00\x40\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00",
b"\x00\x40\x00\x00\x00\x00\x00\x04\x00\x00\x00\x01",
b"\x00\x40\x00\x00\x00\x00\x00\x04\x00\x00\x00\x02",
b"\x00\x40\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00",
b"\x00\x40\x00\x00\x00\x00\x00\x05\x00\x00\x00\x01",
b"\x00\x40\x00\x00\x00\x00\x00\x05\x00\x00\x00\x02",
b"\x00\x40\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00",
b"\x00\x40\x00\x00\x00\x00\x00\x06\x00\x00\x00\x01",
b"\x00\x40\x00\x00\x00\x00\x00\x06\x00\x00\x00\x02",
b"\x00\x40\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00",
b"\x00\x40\x00\x00\x00\x00\x00\x07\x00\x00\x00\x01",
b"\x00\x40\x00\x00\x00\x00\x00\x07\x00\x00\x00\x02",
b"\x00\x40\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00",
b"\x00\x40\x00\x00\x00\x00\x00\x08\x00\x00\x00\x01",
b"\x00\x40\x00\x00\x00\x00\x00\x08\x00\x00\x00\x02",
b"\x00\x40\x00\x00\x00\x00\x00\x09\x00\x00\x00\x00",
b"\x00\x40\x00\x00\x00\x00\x00\x09\x00\x00\x00\x01",
b"\x00\x40\x00\x00\x00\x00\x00\x09\x00\x00\x00\x02",
b"\x00\x40\x00\x00\x00\x00\x00\x0a\x00\x00\x00\x00",
b"\x00\x40\x00\x00\x00\x00\x00\x0a\x00\x00\x00\x01",
b"\x00\x40\x00\x00\x00\x00\x00\x0a\x00\x00\x00\x02",
b"\x00\x40\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00",
b"\x00\x40\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x01",
b"\x00\x40\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x02",
b"\x00\x40\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00",
b"\x00\x40\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x01",
b"\x00\x40\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x02",
b"\x00\x40\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x00",
b"\x00\x40\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x01",
b"\x00\x40\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x02",
b"\x00\x40\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00",
b"\x00\x40\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x01",
b"\x00\x40\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x02",
b"\x00\x40\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x00",
b"\x00\x40\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x01",
b"\x00\x40\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x02",
b"\x00\x40\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00",
b"\x00\x40\x00\x00\x00\x00\x00\x10\x00\x00\x00\x01",
b"\x00\x40\x00\x00\x00\x00\x00\x10\x00\x00\x00\x02",
b"\x00\x40\x00\x00\x00\x00\x00\x11\x00\x00\x00\x00",
b"\x00\x40\x00\x00\x00\x00\x00\x11\x00\x00\x00\x01",
b"\x00\x40\x00\x00\x00\x00\x00\x11\x00\x00\x00\x02",
b"\x00\x40\x00\x00\x00\x00\x00\x12\x00\x00\x00\x00",
b"\x00\x40\x00\x00\x00\x00\x00\x12\x00\x00\x00\x01",
b"\x00\x40\x00\x00\x00\x00\x00\x12\x00\x00\x00\x02",
b"\x00\x40\x00\x00\x00\x00\x00\x13\x00\x00\x00\x00",
b"\x00\x40\x00\x00\x00\x00\x00\x13\x00\x00\x00\x01",
b"\x00\x40\x00\x00\x00\x00\x00\x13\x00\x00\x00\x02",
b"\x00\x40\x00\x00\x00\x00\x00\x14\x00\x00\x00\x00",
b"\x00\x40\x00\x00\x00\x00\x00\x14\x00\x00\x00\x01",
b"\x00\x40\x00\x00\x00\x00\x00\x14\x00\x00\x00\x02",
b"\x00\x21\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x47\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x46\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x46\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01",
b"\x00\x48\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x22\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x20\x22\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x49\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x2f\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x43\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x26\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x35\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x34\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x01\x35\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x01\x37\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x01\x36\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x01\x36\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01",
b"\x00\x23\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x01\x2d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x01\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x21\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
b"\x40\xb7\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00",]

def ip_to_bytes(ip):
    return struct.pack(">BBBB", *map(int,ip.split(".")))

def ip_to_int(ip):
    return struct.unpack(">I", ip_to_bytes(ip))[0]

def _make_datagram(seq, stream, sub, payload):
    header = struct.pack(">IHHHH", seq, stream, sub, len(payload), 0x0)
    return header + payload

def nextseq(seq):
    seq += 1
    if seq == 2**16:
        seq = 1
    return seq

class DiscoverProtocol:
    def __init__(self, on_con_lost):
        self.on_con_lost = on_con_lost
        self.transport = None

    def connection_made(self, transport):
        self.transport = transport
        print(transport)
        ts: TransportSocket = transport.get_extra_info('socket')
        print(ts)
        print(ts.getsockname())
        host, port = ts.getsockname()

        payload_port = struct.pack(">H", port )
        payload_ip = ip_to_bytes(host)
        ansp = payload_ip+payload_port

        message= _make_datagram( stream=0x4351, seq=0x01000000, sub=0, payload=ansp)
        self.transport.sendto(message)

    def datagram_received(self, data, addr):
        print("Received:", data.hex())

        print("Close the socket")
        self.transport.close()

    def error_received(self, exc):
        print('Error received:', exc)

    def connection_lost(self, exc):
        print("Connection closed")
        self.on_con_lost.set_result(True)


class PhotronProtocol:
    def __init__(self, on_con_lost):
        self.on_con_lost = on_con_lost
        self.transport = None
        self.pending_acks = []
        self.sequence = 0

    def connection_made(self, transport):
        self.transport = transport
        print(transport)
        ts: TransportSocket = transport.get_extra_info('socket')
        print(ts)
        print(ts.getsockname())
        host, port = ts.getsockname()

        payload_port = struct.pack(">H", port )
        payload_ip = ip_to_bytes(host)
        ansp = payload_ip+payload_port

        message= _make_datagram( stream=0x4351, seq=self.sequence, sub=1, payload=ansp)
        print("sending", message)
        self.pending_acks.append((self.sequence, 0))
        self.transport.sendto(message)

        self.sequence = nextseq(self.sequence)

    def send_dialog(self, msg):
        message = _make_datagram(stream=0x4445, seq=self.sequence, sub=1, payload=msg)
        print("sending", message)
        self.pending_acks.append((self.sequence, 0))
        self.transport.sendto(message)
        self.sequence = nextseq(self.sequence)

    def _send_ack(self, seq, payload=b''):
        print("acking", seq+1, payload.hex(), type(payload))
        header = struct.pack(">IHHHH", seq+1, 0x5252, 1, len(payload), 0x0)
        self.transport.sendto(header+payload)

    def datagram_received(self, data, addr):
        if len(data) < 12:
            print("invlid packet")
            self.transport.close()

        seq, stream, sub, length, flag = struct.unpack(">IHHHH", data[:12])
        payload = data[12:12 + length]
        if data[12 + length:] != b'\0' * len(data[12 + length:]):
            print("========remainder not zero", data[12 + length:].hex())
            self.transport.close()

        print("Received:", seq, hex(stream), sub, length, hex(flag), payload.hex())

        if stream == 0x5252 and (seq, sub) in self.pending_acks:
            self.pending_acks.remove((seq, sub))
            print("got ack with flag", hex(flag))

        elif stream == 0x4445:
            print("got dialog answer", payload.hex())
            self._send_ack(seq)


    def error_received(self, exc):
        print('Error received:', exc)

    def connection_lost(self, exc):
        print("Connection closed")
        self.on_con_lost.set_result(True)

async def main():
    # Get a reference to the event loop as we plan to use
    # low-level APIs.
    loop = asyncio.get_running_loop()

    on_con_lost = loop.create_future()

    #discover_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    #discover_socket.settimeout(1.0)
    #discover_socket.bind(("127.0.0.1", 0))
    #print("sending socket", discover_socket.getsockname())
    #host, port = discover_socket.getsockname()
    #addr = ("127.0.0.1", 2000)

    #payload_port = struct.pack(">H", port )
    #payload_ip = ip_to_bytes("127.0.0.1")
    #ansp = payload_ip+payload_port

    #message= _make_datagram( stream=0x4351, seq=0x01000000, sub=0, payload=ansp)
    #discover_socket.sendto(message, addr)

    transport, protocol = await loop.create_datagram_endpoint(
        lambda: DiscoverProtocol(on_con_lost),
        remote_addr=('127.0.0.1', 2000))
        #remote_addr=('192.168.2.63', 2000))

    try:
        await on_con_lost
    finally:
        transport.close()
        pass

    on_con_lost = loop.create_future()

    transport, protocol = await loop.create_datagram_endpoint(
        lambda: PhotronProtocol(on_con_lost),
        remote_addr=('127.0.0.1', 2000))
        #remote_addr=('192.168.2.63', 2000))

    for msg in queries:
        protocol.send_dialog(msg)
        await asyncio.sleep(0.01)

    try:
        await on_con_lost
    finally:
        transport.close()
        pass

asyncio.run(main())
